var a = "ab";
a;
a = "cd";
a;

var b = "efg";
b;
a= "hij";
a;

var c = "kl";
a = "mn";
a;
c = "o";
c;
b;


------------------------------------

var a = {1,0,3};
a[1];
a[1] = 2;
a[2];
a[1];

var b = {4,5,1,7};
a[1] = 22;
b[2];
a[1];
b[2] = 6;
b[3] = 8;
b[3];
b[2];

var c = {"ab", "cdefg", "hij"};
c[1];
c[2];
c[2]="klmn";
c[1]="opq";
c[1];
c[2];

--------------------------------------------

var z = {"ab", "cdefg", "hij"};
z[1];
z[2];
z[2]="klmn";
z[1]="opq";
z[1];
z[2];

var a = {1,0,3};
a[1];
a[1] = 2;
a[2];
a[1];

var c = {"rs", "tw", "xy"};
c[1];
c[2];
c[2]="zz";
c[1]="aa.a";
c[1];
c[2];

var b = {4,5,1,7};
a[1] = 22;
b[2];
a[1];
b[2] = 6;
b[3] = 8;
b[3];
b[2];

cdefghijopqklmn032twxyaa.azz12286

--------------------------------------------

var a = 1;
while (true) {
    if(a>3) continue;
    var d = "yoposx";
    d;
    a = a + 1;
    
    if(a==5) break;
}

--------------------------------------

for(var a: {"a", "b","c","d"}) {
    var b = a +234.5;
    b;
}


---------------------------------------

int[] a = {1,2,3};
int[] b = {4,5,6};
b = a;
a[1] = 0;
a[0] = b[2];

a[0]; // 3
a[1]; // 0
b[1]; // 2

---------------------------------------

int[] a = {1,2,3};
int[] b = {4,5,6};
var c = a;
int[] d = {7,8,9};

a[1] = 0;
a[0] = b[2];
c[2] = 100;

a[0]; // 6
a[1]; // 0
c[2]; // 100
b[1]; // 5

------------------------------------
malo 

int[] a = {1,2,3};
int[] b = {4,5,6};
int[] c = a;
int[] d = {7,8,9};

a[1] = 0;
a[0] = b[2];
c[2] = 100;

a[0]; // 6
c[0]; // 6
a[1]; // 0
c[1]; // 0
a[2]; // 100
c[2]; // 100

correcto

int[] a = {1,2,3};
int[] b = {4,5,6};
int[] c = a;
int[] d = {7,8,9};

a[1] = 0;
a[0] = b[2];
c[2] = 100;

a[0]; // 6
c[0]; // 1
a[1]; // 0
c[1]; // 2
a[2]; // 3
c[2]; // 100

--------------------------------

string[] a = {"10000001","2000002","300003"};
string[] b = {"40004","5005","606"};
var c = a;
string[] d = {"77","8","99"};

a[1] = "101";
a[0] = b[2];
c[2] = "2002";

a[0]; // 606
c[0]; // 10000001
a[1]; // 101
c[1]; // 2000002
a[2]; // 300003
c[2]; // 2002

606 10000001 101 2000002 300003 2002

-----------------------------------

string[] a = {"10000001","2000002","300003"};
string[] b = {"40004","5005","606"};
b = a;
string[] d = {"77","8","99"};

a[1] = "101";
a[0] = b[2];
b[2] = "2002";

a[0]; // 300003
b[0]; // 10000001
a[1]; // 101
b[1]; // 2000002
a[2]; // 300003
b[2]; // 2002

300003 10000001 101 2000002 300003 2002

-----------------------------------------

for(var a: {"a", "b"}) {
    var b = a +234;
    b;
    for(var b: {"c","d"}) {
        var c = a +6;
        c;
        
        
        for(var c: {"c","d"}) {
            var b = a +6;
            b;
            if(c == c) {
                break;
            }
        }
    }
}

-----------------------------------------------

int a(int a, string b) {
    return a;
}

var b = "yo";

a(1, b);

b = "si";
b;

--------------------------------------------------
int[] a(int a) {
    return {a+1,a+2,a+3};
}

var c = {1,2,3};
var b = "yo";

c = a(4);

c[2];






var c = {1,2,3};
var b = c;

b[2];





int[] a(int a) {
    return {a+1,a+2,a+3};
}

var c = {1,2,3};
var b = "yo";

c = a(4);

c[2];




-----------------------------------------------------------

int[] a(int a) {
    return {a+1,a+2,a+3};
}

var c = a(4);
c[2];


-----------------------------------------------------

void hanoi(int n, string origen, string auxiliar, string destino) {
    if (n == 1) {
        "Mover disco 1 de " + origen + " a " + destino;
    } else {
        hanoi(n - 1, origen, destino, auxiliar);
        "Mover disco " + n + " de  " + origen + " a " + destino;
        hanoi(n - 1, auxiliar, origen, destino);
    }
}

hanoi(3, "A", "B", "C");


---------------------------------------------------------

int fibonacci(int n) {
    if (n == 0 || n == 1) {
        return n;
    } else {
        return fibonacci(n - 1) + fibonacci(n - 2);
    }
}

fibonacci(3);

primera fun n3(param n2(regresa 1))  + n3(param n1(regresa 1))

primera fun n2(param n1) n1(regresa 1) 
segunda fun 2(para 0) 0(regresa 0)
regreso 1 + 0 + 

------------------------------------------

int ackermann(int m, int n) {
    if (m == 0) {
        return n + 1;
    } else if (n == 0) {
        return ackermann(m - 1, 1);
    } else {
        return ackermann(m - 1, ackermann(m, n - 1));
    }
}

ackerman(1,1);

if
if
ackerman(0, ackerman(1, 0)) = ackerman(0, 2)
                              if return 3
            if
            if ackerman(0, 1) = 2
                    if return 2



2
ackerman(1, ackerman(2,1)) 328 = ackerman(1, 5) 
            ackerman(0, ackerman(1, 4)) 328 = ackerman( 0 , 6) = 7

                        ackerman(0, ackerman(1, 3)) = ackerman(0, 5) = 6

                                    ackerman(0, ackerman(1, 2)) = ackerman(0,4) = 5

                                                ackerman(0, ackerman(1, 1)) = ackerman(0, 3) = 4

                                                            ackerman(0, ackerman(1, 0)) = ackerman(0, 2) = 3

                                                                        ackerman(0, 1) = 2


            ackerman(1, ackerman(2, 0)) 328 = ackerman(1, 3) = ackerman(0, ackerman(1, 2)) 328 = ackerman(0, 4)
                                                                                                    5

                                                                            ackerman(0, ackerman(1, 1)) 328 = ackerman(0,3)
                                                                                                                4


                                                                                        ackerman(0, ackerman(1, 0)) 328 = ackerman(0, 2)
                                                                                                                            3

                                                                                                    ackerman(0, 1) 326 2
                                                                                                    324  =  2 


                        ackerman(1, 1) 326  3
 
                        ackerman(0, ackerman(1, 0)) 328  = ackerman(0,2)
                                                            3  324

                                    ackerman(0, 1) 326 2

                                    2              324 
            

-----------------------------------------------------------------

int[] numerosPares = {2, 4, 6, 8, 10};
int[] copiaPares = numerosPares;

System.out.println("2. join");
System.out.println(copiaPares.join()); // 2, 4, 6, 8, 10
System.out.println("");

---------------------------------------------------------------

int[] numerosPares = {2, 4};
int[] copiaPares = numerosPares;

copiaPares.join();

-------------------------------------------------------------------

int[] numerosPares = {2, 4, 6, 8, 10};

System.out.println(numerosPares.indexOf(10)); // 1
System.out.println(numerosPares.indexOf(5)); // -1


----------------------------------------------------------------



int[] numerosPares = {2, 4, 6, 8, 10};
int[] copiaPares = numerosPares;

System.out.println(copiaPares.join()); // 2, 4, 6, 8, 10


System.out.println(copiaPares.length);


---------------------------------------------------------------

void saludar2(string nombre) {
    System.out.println("Hola " + nombre);
}

saludar2("mundo");


------------------------------------------------------------

bool[] objects = {true, true, true, false};

string holi(int num) {
    var bytesToFreeFromStack = 0;

    for(var index = objects.length - 1; index >= 0; index-=1) { 
        for(var otro = num; otro > 1 ; otro = otro - 1) {
            if(!objects[index]) return "holi";
        }
        continue;
    }

    bytesToFreeFromStack += 2;

    return "ay";
}

System.out.println(holi(4));


--------------------------------------------------------------------

bool[] objects = {true, true, true, false};

void sho(int num) {
    var bytesToFreeFromStack = 0;

    for(var index = objects.length - 1; index >= 0; index-=1) { 
        for(var otro = num; otro > 1 ; otro = otro - 1) {
            if(!objects[index]) break;
        }
    }

    bytesToFreeFromStack += 2;
}

sho(4);